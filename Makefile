# ==============================================================================
# Makefile
# ==============================================================================
#
# Uso:
#   - `make help` para ver todos os comandos.
#   - As indenta√ß√µes DEVEM ser feitas com TABs.
#
# ------------------------------------------------------------------------------

# --- ‚öôÔ∏è Configura√ß√£o ---
PYTHON = python
MANAGE = $(PYTHON) manage.py
REQUIREMENTS = requirements.txt
# Defina um valor razo√°vel para a cobertura m√≠nima de testes (ex: 85, 90, 100)
MIN_COVERAGE = 100

# --- ‚ÑπÔ∏è Ajuda ---
.PHONY: help
help:
	@echo "-----------------------------------------------------"
	@echo "Makefile para o projeto Web Shop"
	@echo "-----------------------------------------------------"
	@echo "\n  üì¶ Setup & Depend√™ncias:"
	@echo "    make install         - Instala as depend√™ncias de $(REQUIREMENTS)"
	@echo "    make safety          - Verifica as depend√™ncias em busca de vulnerabilidades"
	@echo "\n  üíª Desenvolvimento:"
	@echo "    make run             - Inicia o servidor de desenvolvimento"
	@echo "    make migrate         - Aplica as migra√ß√µes do banco de dados"
	@echo "    make migrations      - Cria novos arquivos de migra√ß√£o para um app (ex: make migrations APP=brands)"
	@echo "    make shell           - Abre o shell do Django"
	@echo "    make loaddata        - Carrega uma fixture (ex: make loaddata FIXTURE=users)"
	@echo "\n  ‚úÖ Qualidade & Testes:"
	@echo "    make format          - Formata o c√≥digo com Black e isort"
	@echo "    make lint            - Roda o linter (Ruff) para encontrar erros e problemas de estilo"
	@echo "    make test            - Roda todos os testes do projeto"
	@echo "    make test-app        - Roda os testes de um app espec√≠fico (ex: make test-app APP=brands)"
	@echo "    make test-coverage   - Roda os testes e gera um relat√≥rio de cobertura"
	@echo "    make pre-commit      - Roda os hooks de pre-commit em todos os arquivos"
	@echo "    make ci-check        - Roda todas as verifica√ß√µes de CI (lint, seguran√ßa, migrations, testes)"
	@echo "\n  üßπ Limpeza:"
	@echo "    make clean           - Remove arquivos tempor√°rios do Python"


# --- üì¶ Setup & Depend√™ncias ---
.PHONY: install
install:
	pip install -r $(REQUIREMENTS)

.PHONY: safety
safety:
	@echo "üîé Verificando depend√™ncias com Safety..."
	safety check -r $(REQUIREMENTS) --full-report


# --- üíª Desenvolvimento ---
.PHONY: run
run:
	$(MANAGE) runserver

.PHONY: migrate
migrate:
	$(MANAGE) migrate

.PHONY: migrations
migrations:
	$(MANAGE) makemigrations $(APP)

.PHONY: shell
shell:
	$(MANAGE) shell_plus

.PHONY: loaddata
loaddata:
	@if [ -z "$(FIXTURE)" ]; then \
		echo "ERRO: Especifique a fixture. Ex: make loaddata FIXTURE=nome_do_arquivo"; \
		exit 1; \
	fi
	$(MANAGE) loaddata $(FIXTURE)


# --- ‚úÖ Qualidade & Testes ---
.PHONY: format
format:
	@echo "üíÖ Formatando o c√≥digo com Black e isort..."
	black .
	isort .

.PHONY: lint
lint:
	@echo "üßê Verificando a qualidade do c√≥digo com Ruff..."
	ruff check .

.PHONY: test
test:
	$(MANAGE) test -v 2

.PHONY: test-app
test-app:
	@if [ -z "$(APP)" ]; then \
		echo "ERRO: Especifique o app. Ex: make test-app APP=brands"; \
		exit 1; \
	fi
	$(MANAGE) test $(APP) -v 2

.PHONY: test-coverage
test-coverage:
	@echo "Rodando testes e gerando relatorio de cobertura (minimo: $(MIN_COVERAGE)%)"
	$(PYTHON) -m coverage run manage.py test -v 2
	$(PYTHON) -m coverage report -m --fail-under=$(MIN_COVERAGE)
	$(PYTHON) -m coverage html
	@echo "Relat√≥rio HTML completo dispon√≠vel em htmlcov/index.html"

.PHONY: pre-commit
pre-commit:
	pre-commit run --all-files

.PHONY: check-migrations
check-migrations:
	@echo "üîç Verificando se faltam migra√ß√µes..."
	$(MANAGE) makemigrations --check --no-input

.PHONY: ci-check
ci-check: safety lint check-migrations test-coverage


# --- üßπ Limpeza ---
.PHONY: clean
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
